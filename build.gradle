/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'jacoco'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    // Core Spring Boot Dependencies
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Web Security (JWT)
    implementation 'com.auth0:java-jwt:4.2.0'
    
    // Database (MySQL)
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Spring Boot DevTools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.7.0'
    testRuntimeOnly 'com.h2database:h2'
}

group = 'com.unaux.dairo'
version = '0.0.1-SNAPSHOT'
description = 'api'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

/* 
java {
  sourceCompatibility = '17'
} 
*/
apply plugin: 'java'
apply plugin: 'org.springframework.boot'


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

test {
    useJUnitPlatform()
}
/*
tasks.named('test') {
  useJUnitPlatform()
}
*/
// excluye las clases de Lombok del archivo JAR generado por Spring Boot.
bootJar {
    layered {
        application {
            intoLayer("spring-boot-loader") {
                exclude("org/springframework/boot/devtools/**")
            }
            intoLayer("lombok") {
                exclude("**/lombok/**")
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.12"
}

// Excluir del reporte Jacoco el metodo main y las entidades
jacocoTestReport {
    reports {
        // Establece la ruta del archivo de datos de ejecución de Jacoco
        executionData = files('target/jacoco.exec')
        //xml.enabled = true    // No es necesario usar 'enabled' aquí. Gradle lo infiere de 'executionData'
        //html.enabled = true   // No es necesario usar 'enabled' aquí. Gradle lo infiere de 'executionData'
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/Main.class',
                    '**/ApiApplication.*',
                    '**/domain/**',
                    '**/infra/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'PACKAGE'
            enabled = true
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.1  // Puedes ajustar este valor según tus necesidades (0.85 para 85%, por ejemplo)
            }
        }
    }
}